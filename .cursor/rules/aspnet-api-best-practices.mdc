---
description: 
globs: 
alwaysApply: false
---
# ASP.NET Core API Project Structure & Best Practices

This project follows modern .NET Core API best practices, including:

- **Clean Architecture** with multiple layers for loose coupling and separation of concerns
- **Repository Pattern** and **Unit of Work Pattern** for data access abstraction ([HOMMS.Infrastructure/Repositories/](mdc:HOMMS.Infrastructure/Repositories))
- **Entity Framework Core** as the ORM for database operations
- **ASP.NET Core Identity** for user management, authentication, and authorization
- **SOLID**, **DRY**, and **OOP** principles throughout the codebase
- **Code-First** approach with **Fluent API** and **Data Annotations** for entity configuration and validation ([HOMMS.Domain/Entities/](mdc:HOMMS.Domain/Entities))
- **JWT Authentication** and **Authorization** for secure API access ([HOMMS.API/Program.cs](mdc:HOMMS.API/Program.cs))
- **Role-Based Access Control (RBAC)** for managing multiple user roles
- **Dependency Injection** for loose coupling and better testability

## Enhanced Project Structure

- **[HOMMS.API/](mdc:HOMMS.API)**: Main ASP.NET Core API project
  - `Program.cs`: Configures services, authentication, authorization, and middleware
  - `appsettings.json`: Application configuration including connection strings, JWT settings, etc.
  - `Controllers/`: API controllers handling HTTP requests and responses
  - `Middleware/`: Custom middleware components for request/response processing
  - `Extensions/`: Service collection extensions for cleaner dependency registration
  - `Filters/`: Action and exception filters for cross-cutting concerns
- **[HOMMS.Domain/](mdc:HOMMS.Domain)**: Domain models and business logic
  - `Entities/`: Entity classes with data annotations for validation, including Identity entities
  - `Dtos/`: Data Transfer Objects for API requests and responses
  - `Enums/`: Enumeration types used across the application
  - `Exceptions/`: Custom exception types for domain-specific errors
- **[HOMMS.Infrastructure/](mdc:HOMMS.Infrastructure)**: Data access layer using Entity Framework Core
  - `Data/`: DbContext class and database configurations, including Identity DbContext
  - `Configurations/`: Fluent API entity configurations (IEntityTypeConfiguration<T>)
  - `Extensions/`: Extensions for configuring database context and services
  - `Migrations/`: EF Core migrations for database schema updates
  - `Seeds/`: Seed data for initial database population, including Identity roles and users
  - `Repositories/`: Repository pattern implementation
    - `Interfaces/`: Repository interfaces (IRepository<T>, IUserRepository, etc.)
    - `Implementations/`: Concrete repository implementations
    - `UnitOfWork/`: Unit of Work pattern implementation coordinating repositories
- **[HOMMS.Application/](mdc:HOMMS.Application)**: Business logic and application services
  - `Interfaces/`: Service interfaces (IUserService, IAuthService, etc.)
  - `Implementations/`: Concrete service implementations
  - `Validators/`: Validation logic for business operations
- **[HOMMS.Common/](mdc:HOMMS.Common)**: Shared utilities and helpers
  - `Constants/`: Constant values and configuration keys
  - `Helpers/`: Helper methods and extension methods
  - `Security/`: Security-related utilities (hashing, encryption, etc.)

## Entity Framework Core Usage

- **DbContext**: Defined in [HOMMS.Infrastructure/Data/](mdc:HOMMS.Infrastructure/Data) as the main entry point for database operations
- **Entity Configuration**: Using Fluent API in separate configuration classes (IEntityTypeConfiguration<T>)
- **Code-First Migrations**: Generate and apply database schema changes through EF Core migrations
- **Repository Pattern**: EF Core operations are encapsulated within repository classes
- **Query Performance**: Use of AsNoTracking() for read-only queries and Include() for eager loading
- **Change Tracking**: Controlled with unit of work pattern to manage entity state changes efficiently
- **Connection Resiliency**: Implementing retry logic for transient database failures

## ASP.NET Core Identity Integration

- **Custom Identity Models**: Extended IdentityUser and IdentityRole with application-specific properties
- **JWT Authentication**: Token-based authentication using JWT with refresh tokens
- **Identity Configuration**: Customized password requirements, lockout settings, and user validation
- **Role-Based Authorization**: Policy-based authorization with custom roles (Admin, Manager, User)
- **Account Management**: Complete user lifecycle including registration, email confirmation, password reset
- **Identity Stores**: Entity Framework Core based identity stores
- **Secure Password Storage**: Password hashing with industry-standard algorithms
- **Token Services**: JWT token generation, validation, and refresh mechanisms
- **Seeding**: Automatic seeding of roles and admin user on application startup

## Dependency Injection & Loose Coupling

- **Interface-based Programming**: All components expose interfaces and depend on abstractions, not implementations
- **Dependency Registration**: Services are registered in Program.cs or dedicated extension methods
- **Lifetime Management**: Appropriate service lifetimes (Scoped, Transient, Singleton) for each component
- **Constructor Injection**: Dependencies provided through constructors, not created directly
- **Configuration Injection**: Application settings injected through IOptions pattern

## SOLID Principles Implementation

- **Single Responsibility**: Each class has one reason to change (repositories handle data, services handle business logic)
- **Open/Closed**: Code is open for extension but closed for modification through abstractions
- **Liskov Substitution**: Derived classes are substitutable for their base types
- **Interface Segregation**: Multiple specific interfaces preferred over single general-purpose interface
- **Dependency Inversion**: High-level modules depend on abstractions, not low-level implementations

## Authentication & Authorization

- **JWT Authentication**: Token-based authentication with refresh tokens
- **RBAC Implementation**: Role-based access using ASP.NET Core's policy-based authorization
- **Claims-based Identity**: User identity based on claims for fine-grained permissions
- **Secure Password Storage**: Using password hashing with salt
- **Token Validation**: Validate JWT tokens with appropriate lifetime and signature verification

## Best Practices for Maintainability & Extensibility

- **Consistent Naming Conventions**: Follow .NET naming guidelines throughout the codebase
- **Comprehensive Documentation**: Code is documented with XML comments on public APIs
- **Meaningful Exception Handling**: Custom exceptions with helpful error messages
- **Logging & Monitoring**: Structured logging with different severity levels
- **Pagination**: API endpoints support pagination for large result sets
- **Versioning**: API versioning to support backward compatibility
- **Testing**: Unit, integration, and functional tests for each component
- **Asynchronous Programming**: Async/await pattern for I/O-bound operations

## Example References

- **DbContext & Fluent API**: See [HOMMS.Infrastructure/Data/](mdc:HOMMS.Infrastructure/Data) for DbContext and model configuration.
- **Entities & Validation**: See [HOMMS.Domain/Entities/](mdc:HOMMS.Domain/Entities) for entity classes with data annotations.
- **Repositories & Unit of Work**: See [HOMMS.Infrastructure/Repositories/](mdc:HOMMS.Infrastructure/Repositories) for repository interfaces and implementations.
- **Services**: See [HOMMS.Application/](mdc:HOMMS.Application) for business logic and application services.
- **Authentication & Authorization**: See [HOMMS.API/Program.cs](mdc:HOMMS.API/Program.cs) for service configuration.
- **Identity Models**: See [HOMMS.Domain/Entities/ApplicationUser.cs](mdc:HOMMS.Domain/Entities/ApplicationUser.cs) and [HOMMS.Domain/Entities/ApplicationRole.cs](mdc:HOMMS.Domain/Entities/ApplicationRole.cs) for custom identity entities.
- **Controllers**: See [HOMMS.API/Controllers/](mdc:HOMMS.API/Controllers) for API endpoints, decorated with `[Authorize]` and role policies.

## Notes

- The folder structure is designed for loose coupling, reusability, and extensibility.
- All new features should adhere to these patterns and principles.
- Use interfaces extensively to allow for different implementations and easier testing.
- Keep controllers thin, moving business logic to service layer.
- Repository methods should be generic where possible, with specialized methods only when necessary.
